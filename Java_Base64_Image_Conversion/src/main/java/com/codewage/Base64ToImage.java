package com.codewage;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import sun.misc.BASE64Decoder;

public class Base64ToImage {

	public static void main(String[] args) throws IOException {

		String Base64 = "";
		imageDecoder(Base64);

	}

	public static void imageDecoder(String Base64) throws IOException {
		
		 BufferedImage image = null;
	        byte[] imageByte;
	        try {
	            BASE64Decoder decoder = new BASE64Decoder();
	            imageByte = decoder.decodeBuffer(Base64);
	            ByteArrayInputStream bis = new ByteArrayInputStream(imageByte);
	            image = ImageIO.read(bis);
	            File outputfile = new File("image.png");
	            ImageIO.write(image, "png", outputfile);
	            
	            bis.close();
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	}

}
